// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Automation
{
    /// <summary>
    /// Service operation for automation stream items.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class JobStreamOperation : IServiceOperations<AutomationManagementClient>, IJobStreamOperation
    {
        /// <summary>
        /// Initializes a new instance of the JobStreamOperation class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal JobStreamOperation(AutomationManagementClient client)
        {
            this._client = client;
        }
        
        private AutomationManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Automation.AutomationManagementClient.
        /// </summary>
        public AutomationManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Retrieve a list of stream items of the job identified by jobId.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the list job stream's stream
        /// items operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get job output operation.
        /// </returns>
        public async Task<JobStreamListStreamItemsResponse> ListStreamItemsAsync(string automationAccount, JobStreamListStreamItemsParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.JobId == null)
            {
                throw new ArgumentNullException("parameters.JobId");
            }
            if (parameters.StartTime == null)
            {
                throw new ArgumentNullException("parameters.StartTime");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListStreamItemsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/cloudservices/OaaSCS/resources/automation/~/Accounts/" + automationAccount.Trim() + "/JobStreams/GetStreamItems?";
            url = url + "jobId='" + Uri.EscapeDataString(parameters.JobId.Trim()) + "'";
            url = url + "&streamsCreatedSinceDateTime='" + Uri.EscapeDataString(parameters.StartTime.Trim()) + "'";
            if (parameters.StreamType != null)
            {
                url = url + "&$filter=StreamTypeName eq '" + Uri.EscapeDataString(parameters.StreamType != null ? parameters.StreamType.Trim() : "") + "'";
            }
            if (parameters.SkipToken != null)
            {
                url = url + "&$skiptoken=" + Uri.EscapeDataString(parameters.SkipToken != null ? parameters.SkipToken.Trim() : "");
            }
            url = url + "&api-version=2014-03-13_Preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("MaxDataServiceVersion", "3.0");
                httpRequest.Headers.Add("MinDataServiceVersion", "3.0");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobStreamListStreamItemsResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new JobStreamListStreamItemsResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                JobStreamItem jobStreamItemInstance = new JobStreamItem();
                                result.JobStreamItems.Add(jobStreamItemInstance);
                                
                                JToken accountIdValue = valueValue["AccountId"];
                                if (accountIdValue != null && accountIdValue.Type != JTokenType.Null)
                                {
                                    string accountIdInstance = ((string)accountIdValue);
                                    jobStreamItemInstance.AccountId = accountIdInstance;
                                }
                                
                                JToken jobIdValue = valueValue["JobId"];
                                if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                {
                                    string jobIdInstance = ((string)jobIdValue);
                                    jobStreamItemInstance.JobId = jobIdInstance;
                                }
                                
                                JToken runbookVersionIdValue = valueValue["RunbookVersionId"];
                                if (runbookVersionIdValue != null && runbookVersionIdValue.Type != JTokenType.Null)
                                {
                                    string runbookVersionIdInstance = ((string)runbookVersionIdValue);
                                    jobStreamItemInstance.RunbookVersionId = runbookVersionIdInstance;
                                }
                                
                                JToken streamTextValue = valueValue["StreamText"];
                                if (streamTextValue != null && streamTextValue.Type != JTokenType.Null)
                                {
                                    string streamTextInstance = ((string)streamTextValue);
                                    jobStreamItemInstance.Text = streamTextInstance;
                                }
                                
                                JToken streamTimeValue = valueValue["StreamTime"];
                                if (streamTimeValue != null && streamTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime streamTimeInstance = ((DateTime)streamTimeValue);
                                    jobStreamItemInstance.Time = streamTimeInstance;
                                }
                                
                                JToken streamTypeNameValue = valueValue["StreamTypeName"];
                                if (streamTypeNameValue != null && streamTypeNameValue.Type != JTokenType.Null)
                                {
                                    string streamTypeNameInstance = ((string)streamTypeNameValue);
                                    jobStreamItemInstance.Type = streamTypeNameInstance;
                                }
                            }
                        }
                        
                        JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                        if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                        {
                            string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                            result.SkipToken = odatanextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
